from datetime import datetime
from uuid import uuid4

from pydantic import BaseModel, ConfigDict, Field, model_validator


class BaseSchema(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
        use_enum_values=True,
        extra="ignore",
    )


class BaseData(BaseSchema):
    model_config = ConfigDict(
        from_attributes=True,
        use_enum_values=True,
        extra="ignore",
    )

    public_id: str

    @property
    def __topic__(self):
        raise NotImplementedError("override this property")

    @property
    def __event_name__(self):
        raise NotImplementedError("override this property")

    @property
    def __event_version__(self):
        raise NotImplementedError("override this property")


class Message[T: BaseData | dict](BaseSchema):
    producer: str
    data: T

    # Autogenerated fields
    event_id: str = Field(default_factory=lambda: str(uuid4()))
    event_time: str = Field(default_factory=lambda: datetime.now().isoformat())
    event_name: str = ""
    event_version: int = 0

    @model_validator(mode="after")
    def set_event_name_version(self):
        if isinstance(self.data, dict):
            if not self.event_name and self.data:
                self.event_id = self.data.get("__event_name__", "")
            if not self.event_version and self.data:
                self.event_version = self.data.get("__event_version__", 0)

        if isinstance(self.data, BaseData):
            self.event_name = self.data.__event_name__
            self.event_version = self.data.__event_version__

        return self
